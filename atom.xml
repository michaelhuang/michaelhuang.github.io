<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>huangzf&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://michaelhuang.github.io/"/>
  <updated>2017-06-29T07:11:52.000Z</updated>
  <id>http://michaelhuang.github.io/</id>
  
  <author>
    <name>huangzf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你的分布式锁安全吗?</title>
    <link href="http://michaelhuang.github.io/2016/09/04/lock_redis/"/>
    <id>http://michaelhuang.github.io/2016/09/04/lock_redis/</id>
    <published>2016-09-04T04:15:56.000Z</published>
    <updated>2017-06-29T07:11:52.000Z</updated>
    
    <content type="html">&lt;p&gt;首先你必须弄清楚，用分布式锁来做什么？是解决效率问题，还是一致性问题；不能混为一谈，跟个追星族一样，哪个工具火就用哪个，比如Redis很火，什么都用它，锁就想当然的用Redlock；如果是效率问题，那可能还好一些；但是如果是一致性问题，那你得认真对待，你目前的实现方案可能会某一天让你痛苦不堪！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;你为什么要用分布式锁&quot;&gt;&lt;a href=&quot;#你为什么要用分布式锁&quot; class=&quot;headerlink&quot; title=&quot;你为什么要用分布式锁&quot;&gt;&lt;/a&gt;你为什么要用分布式锁&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;效率&lt;br&gt;比如分布式多节点，虽然业务有幂等性保护，但是不想让一次任务被调度多次（打印太多错误日志，数据库主键约束，耗费资源）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保证准确完整&lt;br&gt;为保证数据状态的准确一致，如果多个节点同时被调度，会造成数据损坏或丢失，或者系统运行状态不可控&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;tip&quot;&gt;&lt;br&gt;这两种情况，一定要区别对待！&lt;br&gt;&lt;/div&gt;

&lt;p&gt;如果是后者，你用的方案不是强一致，那不是自欺欺人吗？比如很流行的Redlock本身并非强一致性，却要解决一致性问题，参见&lt;a href=&quot;https://aphyr.com/posts/283-jepsen-redis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jepsen test Redis&lt;/a&gt;, &lt;a href=&quot;https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to do distributed locking&lt;/a&gt;&lt;br&gt;如果是前者，出于效率优化，却大费周折搞了个大规模集群，增加问题的复杂度，或多或少有点大炮打蚊子&lt;/p&gt;
&lt;h2 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;headerlink&quot; title=&quot;问题分析&quot;&gt;&lt;/a&gt;问题分析&lt;/h2&gt;&lt;p&gt;一定要谨慎谨慎，再谨慎！不能github上找一个就用！比如下面这个用Redis实现的，他可没告诉你不适于强一致性要求；你发现问题了吗？&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; timeout = timeoutMsecs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  JedisCommands jedis = jedisPool.getResource();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (timeout &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; expires = System.currentTimeMillis() + expireMsecs + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String expiresStr = String.valueOf(expires);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (jedis.setnx(lockKey, expiresStr) == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;// lock acquired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          jedis.expire(lockKey, (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) TimeUnit.MILLISECONDS.toSeconds(expireMsecs) + &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          locked = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String currentValueStr = jedis.get(lockKey);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (currentValueStr != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;amp;&amp;amp; Long.parseLong(currentValueStr) &amp;lt; System.currentTimeMillis()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;// lock is expired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          String oldValueStr = jedis.getSet(lockKey, expiresStr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          jedis.expire(lockKey, (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) TimeUnit.MILLISECONDS.toSeconds(expireMsecs) + &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (oldValueStr != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; oldValueStr.equals(currentValueStr)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// lock acquired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            locked = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        timeout -= &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          Thread.sleep(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LockException(-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jedisPool.returnResource(jedis);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我敢说90%多都是这么实现的，&lt;code&gt;setnx =&amp;gt; get =&amp;gt; getSet&lt;/code&gt;, 官方文档也是这么给的&lt;a href=&quot;http://redis.io/commands/setnx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://redis.io/commands/setnx&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;System.currentTimeMillis&lt;/code&gt;比较，通过和系统本地时间比较判定超时时间，有待商榷；尤其是大规模集群，时间准同步基本不可能，或多或少都有偏差，网络问题造成delay很难避免&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;synchronized&lt;/code&gt;多个jvm还有用吗？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;考虑这个场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A，B节点同时判定锁超时&lt;/li&gt;
&lt;li&gt;A节点&lt;code&gt;getSet&lt;/code&gt;成功，成功获取到锁返回&lt;/li&gt;
&lt;li&gt;B节点&lt;code&gt;getSet&lt;/code&gt;, 比较&lt;code&gt;oldValueStr.equals(currentValueStr)&lt;/code&gt;，获取锁失败，进入下一轮回&lt;/li&gt;
&lt;li&gt;B节点时钟跳前，执行&lt;code&gt;getSet&lt;/code&gt;，比较&lt;code&gt;oldValueStr.equals(currentValueStr)&lt;/code&gt;成功，成功获取到锁返回&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样是不是A，B节点就同时获取到锁了？虽说概率极低，但是还是有这种可能&lt;/p&gt;
&lt;p&gt;继续看unlock方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  JedisCommands jedis = jedisPool.getResource();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (locked) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      jedis.del(lockKey);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      locked = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jedisPool.returnResource(jedis);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们知道为了避免死锁，都会设置锁超时时间；这是对的，但是这个unlock实现是有问题的&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A节点成功获取锁&lt;/li&gt;
&lt;li&gt;A节点full gc造成锁超时&lt;/li&gt;
&lt;li&gt;B节点成功获取到锁&lt;/li&gt;
&lt;li&gt;A节点full gc后，任务执行完，调用unlock&lt;/li&gt;
&lt;li&gt;C节点成功获取到锁，此时B，C节点同时占有锁&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;虽说超时问题确实很难解决，因为很难断定A节点是真的宕机还是处理很慢，但是问题在于A节点删除了别人的锁&lt;/p&gt;
&lt;h2 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h2&gt;&lt;p&gt;该解决方法仅限于解决效率问题，不适用于强一致性要求，同时超时情况下有可能多节点同时持有锁；但是会很好的避免上述状况&lt;/p&gt;
&lt;h3 id=&quot;不要用System-currentTimeMillis&quot;&gt;&lt;a href=&quot;#不要用System-currentTimeMillis&quot; class=&quot;headerlink&quot; title=&quot;不要用System.currentTimeMillis&quot;&gt;&lt;/a&gt;不要用System.currentTimeMillis&lt;/h3&gt;&lt;p&gt;用&lt;a href=&quot;http://redis.io/commands/set&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://redis.io/commands/set&lt;/a&gt;, 把【&lt;code&gt;超时时间，key, token&lt;/code&gt;】原子塞进Redis，把超时判断逻辑交给Redis（其实Redis也是用系统时间判断的&lt;a href=&quot;https://github.com/antirez/redis/blob/edd4d555df57dc84265fdfb4ef59a4678832f6da/src/server.c#L390-L404）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/antirez/redis/blob/edd4d555df57dc84265fdfb4ef59a4678832f6da/src/server.c#L390-L404）&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tryLock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Jedis jedis = jedis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; timeout = getTimeoutMsecs();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (timeout &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;OK&quot;&lt;/span&gt;.equals(jedis().set(getLockKey(), getToken(), &lt;span class=&quot;string&quot;&gt;&quot;NX&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;PX&quot;&lt;/span&gt;, getExpireMsecs()))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          setLocked(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        timeout -= &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          TimeUnit.MILLISECONDS.sleep(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LockException(-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      jedis.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;unlock加入token校验&quot;&gt;&lt;a href=&quot;#unlock加入token校验&quot; class=&quot;headerlink&quot; title=&quot;unlock加入token校验&quot;&gt;&lt;/a&gt;unlock加入token校验&lt;/h3&gt;&lt;p&gt;利用lua脚本，保证原子性&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String DELETE_IF_OWNED =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;if redis.call(&#39;get&#39;, KEYS[1]) == ARGV[1] then &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          + &lt;span class=&quot;string&quot;&gt;&quot;return redis.call(&#39;del&#39;, KEYS[1]) &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          + &lt;span class=&quot;string&quot;&gt;&quot;else &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          + &lt;span class=&quot;string&quot;&gt;&quot;return 0 &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          + &lt;span class=&quot;string&quot;&gt;&quot;end&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Jedis jedis = jedis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isLocked()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jedis.eval(DELETE_IF_OWNED, Arrays.asList(getLockKey()), Arrays.asList(getToken()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setLocked(&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      jedis.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h2&gt;&lt;p&gt;分布式锁服务实现确实很难，但是至少要先明确用来做什么，效率 or 准确性；这样才能选型，若准确性需求，那选择的工具最起码要天生支持一致性(Paxos,Raft,数据库事务机制), 然后再考虑超时等其他问题；&lt;/p&gt;
&lt;p&gt;超时问题是个通病，前面也说到了，目前还没发现很好的解决方法，很多异常检测算法也是概率性的；所以如果需求必须保证准确性，基于数据库事务机制设计会稳妥一些，不可避免侵入业务逻辑，合理权衡&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;首先你必须弄清楚，用分布式锁来做什么？是解决效率问题，还是一致性问题；不能混为一谈，跟个追星族一样，哪个工具火就用哪个，比如Redis很火，什么都用它，锁就想当然的用Redlock；如果是效率问题，那可能还好一些；但是如果是一致性问题，那你得认真对待，你目前的实现方案可能会某一天让你痛苦不堪！&lt;br&gt;
    
    </summary>
    
      <category term="Framework" scheme="http://michaelhuang.github.io/categories/Framework/"/>
    
    
      <category term="redis" scheme="http://michaelhuang.github.io/tags/redis/"/>
    
      <category term="lock" scheme="http://michaelhuang.github.io/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>Closures, Currying, Partials in Scala</title>
    <link href="http://michaelhuang.github.io/2016/07/02/closures-currying-partials/"/>
    <id>http://michaelhuang.github.io/2016/07/02/closures-currying-partials/</id>
    <published>2016-07-02T14:49:00.000Z</published>
    <updated>2017-06-29T09:09:06.000Z</updated>
    
    <content type="html">&lt;p&gt;在FP里面很重要的三个理念：闭包，柯里化，偏函数；用Scala代码简单演示一下&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Closures&quot;&gt;&lt;a href=&quot;#Closures&quot; class=&quot;headerlink&quot; title=&quot;Closures&quot;&gt;&lt;/a&gt;Closures&lt;/h2&gt;&lt;p&gt;wiki定义：闭包是由函数和与其相关的引用环境组合而成的实体.&lt;/p&gt;
&lt;p&gt;字面意思不是很好理解，看下面这个例子&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; otherscope &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// a method that takes a function and a string, and passes the string into&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// the function, and then executes the function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;exec&lt;/span&gt;&lt;/span&gt;(f:(&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;type&quot;&gt;Unit&lt;/span&gt;, name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            f(name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClosureExample&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hello = &lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHello&lt;/span&gt;&lt;/span&gt;(name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) &amp;#123; println(&lt;span class=&quot;string&quot;&gt;s&quot;&lt;span class=&quot;subst&quot;&gt;$hello&lt;/span&gt;, &lt;span class=&quot;subst&quot;&gt;$name&lt;/span&gt;&quot;&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// execute sayHello from the exec method foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; foo = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; otherscope.&lt;span class=&quot;type&quot;&gt;Foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo.exec(sayHello, &lt;span class=&quot;string&quot;&gt;&quot;Al&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// change the local variable &#39;hello&#39;, then execute sayHello from&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the exec method of foo, and see what happens&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hello = &lt;span class=&quot;string&quot;&gt;&quot;Hola&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo.exec(sayHello, &lt;span class=&quot;string&quot;&gt;&quot;Lorenzo&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Result:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Hello, Al&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Hola, Lorenzo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你会发现，定义&lt;code&gt;sayHello()&lt;/code&gt;的时候，没有入参&lt;code&gt;hello&lt;/code&gt;! 但是呢，环顾四周还是有定义的，重要的是不仅第一次exec调用时获取到值，第二次调用竟会神奇的感知到&lt;code&gt;hello&lt;/code&gt;的变更！&lt;/p&gt;
&lt;p&gt;在闭包概念里，&lt;code&gt;hello&lt;/code&gt;这种类型的变量称为&lt;code&gt;free variable&lt;/code&gt;，看名字就不是一个简单变量，实际上它是一个引用，或者叫指针，所以才能感知外围变量值的变化&lt;/p&gt;
&lt;p&gt;形象的两个比喻：文艺版，理工癌版&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这就像两个恋人至死不渝，由于某些原因被分割天涯，但是爱情的魔力使他俩仍能感知彼此；这两个恋人就是那个闭包函数和那个&lt;code&gt;free variable&lt;/code&gt;！&lt;/li&gt;
&lt;li&gt;量子纠缠: 粒子在由两个或两个以上粒子组成系统中相互影响的现象，虽然粒子在空间上可能分开. 爱因斯坦将量子纠缠称为“鬼魅似的远距作用”（spooky action at a distance）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时也能看到FP里面实现闭包很简洁，因为天生支持高阶函数&lt;/p&gt;
&lt;h2 id=&quot;Currying&quot;&gt;&lt;a href=&quot;#Currying&quot; class=&quot;headerlink&quot; title=&quot;Currying&quot;&gt;&lt;/a&gt;Currying&lt;/h2&gt;&lt;p&gt;wiki定义：是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数而且返回结果的新函数的技术.&lt;/p&gt;
&lt;p&gt;还是不直观，来看Scala例子&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Type: (Int,Int) =&amp;gt; Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def plus1(x : Int, y : Int) = &amp;#123;x + y&amp;#125;   // (9, 1) =&amp;gt; &amp;#123;9 + 1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Type: Int =&amp;gt; Int =&amp;gt; Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def plus2(x : Int)(y : Int) = &amp;#123;x + y&amp;#125;   // (9)(1) =&amp;gt; &amp;#123;9 + y&amp;#125; =&amp;gt; &amp;#123;9 + 1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;val p9 = plus2(9)_&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p9(1) // Result: 10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你会发现&lt;code&gt;plus2&lt;/code&gt;函数类型多了个&lt;code&gt;=&amp;gt;&lt;/code&gt;，这个符号表示转换，也就表明多了次转换；&lt;code&gt;val p9 = plus2(9)_ =&amp;gt; plus2(9)(y) =&amp;gt; {9 + y}&lt;/code&gt;; 所以&lt;code&gt;p9(1) =&amp;gt; 9 + 1 =&amp;gt; 10&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;回头再看定义是不是就明白了，Currying就是你给了部分参数，然后会对部分入参进行运算（能算多少算多少）得到一个新函数，并且这个新函数的入参就是你没给的那些参数，这个新函数就叫&lt;code&gt;curried function&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Partials&quot;&gt;&lt;a href=&quot;#Partials&quot; class=&quot;headerlink&quot; title=&quot;Partials&quot;&gt;&lt;/a&gt;Partials&lt;/h2&gt;&lt;p&gt;wiki定义：&lt;code&gt;a partial function from X to Y (written as f: X ↛ Y) is a function f: X ′ → Y, for some subset X ′ of X&lt;/code&gt;&lt;br&gt;说白了就是一个全函数(接受所有入参集合)，但是只想拆分出来几个只能处理部分参数集合的子集函数&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;minus&lt;/span&gt;&lt;/span&gt;(x: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, y: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) = &amp;#123;x - y&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; p9first = minus(&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, _: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p9first(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// Result:  8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; p9second = minus(_: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p9second(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// Result: -8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;比如&lt;code&gt;minus&lt;/code&gt;是全函数，可以接收任何可能的(x,y)作为入参，但是我只想考虑(x=9,y=any)的入参集合，或者(x=any,y=9)的入参集合；可能这个不是很标准，Scala的标准做法是使用&lt;code&gt;PartialFunction&lt;/code&gt;，感兴趣的话可以参考Reference&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://robpatro.com/blog/?p=53&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://robpatro.com/blog/?p=53&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://alvinalexander.com/scala/how-to-use-closures-in-scala-fp-examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://alvinalexander.com/scala/how-to-use-closures-in-scala-fp-examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://alvinalexander.com/scala/how-to-define-use-partial-functions-in-scala-syntax-examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://alvinalexander.com/scala/how-to-define-use-partial-functions-in-scala-syntax-examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在FP里面很重要的三个理念：闭包，柯里化，偏函数；用Scala代码简单演示一下&lt;br&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://michaelhuang.github.io/categories/Programming/"/>
    
    
      <category term="Scala" scheme="http://michaelhuang.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Principles in Scala(一)</title>
    <link href="http://michaelhuang.github.io/2016/06/26/Functional-Programming-Principles-in-Scala/"/>
    <id>http://michaelhuang.github.io/2016/06/26/Functional-Programming-Principles-in-Scala/</id>
    <published>2016-06-26T08:08:50.000Z</published>
    <updated>2017-06-29T07:16:10.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.coursera.org/learn/progfun1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.coursera.org/learn/progfun1&lt;/a&gt;&lt;br&gt;该课程更像是Scala版本的SICP&lt;/p&gt;
&lt;p&gt;WEEK 1 notes:&lt;br&gt;这周主要是sbt、idea插件等环境准备，然后通过几个案例简单介绍下Scala的语法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;环境准备: jdk1.8, sbt0.13.x&lt;/li&gt;
&lt;li&gt;Evaluation Rules: call by value, call by name&lt;/li&gt;
&lt;li&gt;牛顿迭代求平方根&lt;/li&gt;
&lt;li&gt;尾递归&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Prepare&quot;&gt;&lt;a href=&quot;#Prepare&quot; class=&quot;headerlink&quot; title=&quot;Prepare&quot;&gt;&lt;/a&gt;Prepare&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ brew install sbt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 国内repo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cat ~/.sbt/repositories&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[repositories]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;osc: http://maven.oschina.net/content/groups/public/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typesafe: http://repo.typesafe.com/typesafe/ivy-releases/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;]s/[artifact](-[classifier]).[ext], bootOnly&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sonatype-oss-releases&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;maven-central&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sonatype-oss-snapshots&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# idea插件, 使用：cd 工程目录 &amp;amp;&amp;amp; run `sbt gen-idea` &amp;amp;&amp;amp; import project in idea&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cat ~/.sbt/0.13/plugins/build.sbt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addSbtPlugin(&lt;span class=&quot;string&quot;&gt;&quot;com.github.mpeltonen&quot;&lt;/span&gt; % &lt;span class=&quot;string&quot;&gt;&quot;sbt-idea&quot;&lt;/span&gt; % &lt;span class=&quot;string&quot;&gt;&quot;1.6.0&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.scala-sbt.org/release/docs/Setup.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sbt setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mpeltonen/sbt-idea&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sbt idea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://plugins.jetbrains.com/plugin/?idea&amp;amp;id=1347&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;scala idea&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Evaluation-Rules&quot;&gt;&lt;a href=&quot;#Evaluation-Rules&quot; class=&quot;headerlink&quot; title=&quot;Evaluation Rules&quot;&gt;&lt;/a&gt;Evaluation Rules&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Call by value: evaluates the function arguments before calling the function&lt;/li&gt;
&lt;li&gt;Call by name: evaluates the function first, and then evaluates the arguments if need be&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;/span&gt;(x: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, y: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) = x * x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// which faster?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)      &lt;span class=&quot;comment&quot;&gt;// same steps&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)    &lt;span class=&quot;comment&quot;&gt;// CBV&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)    &lt;span class=&quot;comment&quot;&gt;// CBN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// same steps&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;If CBV evaluation of an expression e terminates, then CBN evaluation of e terminates, too&lt;/li&gt;
&lt;li&gt;The other direction is not true&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;/span&gt;(x: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, y: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) = x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, loop)   &lt;span class=&quot;comment&quot;&gt;// Under CBN --&amp;gt; 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, loop)   &lt;span class=&quot;comment&quot;&gt;// Under CBV --&amp;gt; Non-termination&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Scala normally use &lt;code&gt;call-by-value&lt;/code&gt;, but if the type of a function parameter starts with &lt;code&gt;=&amp;gt;&lt;/code&gt; it uses &lt;code&gt;call-by-name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;example&lt;/span&gt; &lt;/span&gt;= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;// CBN, evaluated when called&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; example = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;// CBV, evaluated immediately&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; example = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// evaluated once when needed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;&lt;/span&gt;(x: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;)    &lt;span class=&quot;comment&quot;&gt;// call by value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;&lt;/span&gt;(x: =&amp;gt; &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// call by name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;myFct&lt;/span&gt;&lt;/span&gt;(bindings: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;*) = &amp;#123; ... &amp;#125; &lt;span class=&quot;comment&quot;&gt;// bindings is a sequence of int, containing a varying # of arguments&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;SICP-Newton’s-method&quot;&gt;&lt;a href=&quot;#SICP-Newton’s-method&quot; class=&quot;headerlink&quot; title=&quot;SICP Newton’s method&quot;&gt;&lt;/a&gt;SICP Newton’s method&lt;/h2&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;abs&lt;/span&gt;&lt;/span&gt;(x: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;) = &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) -x &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sqrtIter&lt;/span&gt;&lt;/span&gt;(guess: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;, x: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isGoodEnough(guess, x)) guess&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; sqrtIter(improve(guess, x), x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isGoodEnough&lt;/span&gt;&lt;/span&gt;(guess: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;, x: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  abs(guess * guess - x) &amp;lt; &lt;span class=&quot;number&quot;&gt;0.001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;improve&lt;/span&gt;&lt;/span&gt;(guess: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;, x: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (guess + x / guess) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sqrt&lt;/span&gt;&lt;/span&gt;(x: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;) = sqrtIter(&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;the &lt;code&gt;isGoodEnough&lt;/code&gt; test is not very precise for small numbers and lead to Non-termination for very large numbers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0.001&lt;/li&gt;
&lt;li&gt;0.1e-20&lt;/li&gt;
&lt;li&gt;1.0e20&lt;/li&gt;
&lt;li&gt;1.0e50&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the improved &lt;code&gt;isGoodEnough&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isGoodEnough&lt;/span&gt;&lt;/span&gt;(guess: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;, x: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  abs(guess * guess - x) / x &amp;lt; &lt;span class=&quot;number&quot;&gt;0.001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Blocks-and-Lexical-Scope&quot;&gt;&lt;a href=&quot;#Blocks-and-Lexical-Scope&quot; class=&quot;headerlink&quot; title=&quot;Blocks and Lexical Scope&quot;&gt;&lt;/a&gt;Blocks and Lexical Scope&lt;/h2&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;abs&lt;/span&gt;&lt;/span&gt;(x: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;) = &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) -x &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sqrt&lt;/span&gt;&lt;/span&gt;(x: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;) = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sqrtIter&lt;/span&gt;&lt;/span&gt;(guess: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;, x: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isGoodEnough(guess, x)) guess&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; sqrtIter(improve(guess, x), x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isGoodEnough&lt;/span&gt;&lt;/span&gt;(guess: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;, x: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    abs(guess * guess - x) / x &amp;lt; &lt;span class=&quot;number&quot;&gt;0.001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;improve&lt;/span&gt;&lt;/span&gt;(guess: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;, x: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (guess + x / guess) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sqrtIter(&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;much cleaner&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;abs&lt;/span&gt;&lt;/span&gt;(x: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;) = &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) -x &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sqrt&lt;/span&gt;&lt;/span&gt;(x: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;) = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sqrtIter&lt;/span&gt;&lt;/span&gt;(guess: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isGoodEnough(guess)) guess&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; sqrtIter(improve(guess))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isGoodEnough&lt;/span&gt;&lt;/span&gt;(guess: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    abs(guess * guess - x) / x &amp;lt; &lt;span class=&quot;number&quot;&gt;0.001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;improve&lt;/span&gt;&lt;/span&gt;(guess: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (guess + x / guess) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sqrtIter(&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Tail-Recursion&quot;&gt;&lt;a href=&quot;#Tail-Recursion&quot; class=&quot;headerlink&quot; title=&quot;Tail Recursion&quot;&gt;&lt;/a&gt;Tail Recursion&lt;/h2&gt;&lt;p&gt;If a function calls itself as its last action, the function’s stack frame can be reused.&lt;br&gt;参照SICP 1.2节，递归计算过程的两种形式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linear recursive process 线性递归计算过程&lt;br&gt;构造阶段会形成一个很长的链条，收缩阶段再执行具体计算操作&lt;/li&gt;
&lt;li&gt;iterative process 迭代计算过程&lt;br&gt;常量空间中执行迭代计算，即使这一计算是用递归过程描述的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Tail recursive functions are iterative processes.&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;tip&quot;&gt;&lt;br&gt;不要混淆recursive process(递归计算过程)和recursive procedure(递归过程)；递归过程只是一个概念，而它的进展方式可以是迭代的，也可以是线性递归的&lt;br&gt;&lt;/div&gt;

&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Tail Recursion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;gcd&lt;/span&gt;&lt;/span&gt;(a: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, b:&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (b == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) a &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; gcd(b, a % b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Not Tail Recursion, the expression gets bigger and bigger&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;factorial&lt;/span&gt;&lt;/span&gt;(n: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; n * factorial(n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Tail Recursion in Scala&lt;br&gt;尾递归一直被当做一种编译技巧，有了尾递归的实现，就可以用常规的调用机制表述迭代，所以能使各种复杂的专用迭代结构包装成各种语法糖；比如Scala &lt;code&gt;@tailrec&lt;/code&gt;编译器优化尾递归，如果实现方法不是尾递归会报异常&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//a tail recursive version of factorial&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;factorialTailRecursion&lt;/span&gt;&lt;/span&gt;(n: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@tailrec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loop&lt;/span&gt;&lt;/span&gt;(acc: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, n: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) acc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; loop(acc * n, n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  loop(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.coursera.org/learn/progfun1&quot;&gt;https://www.coursera.org/learn/progfun1&lt;/a&gt;&lt;br&gt;该课程更像是Scala版本的SICP&lt;/p&gt;
&lt;p&gt;WEEK 1 notes:&lt;br&gt;这周主要是sbt、idea插件等环境准备，然后通过几个案例简单介绍下Scala的语法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;环境准备: jdk1.8, sbt0.13.x&lt;/li&gt;
&lt;li&gt;Evaluation Rules: call by value, call by name&lt;/li&gt;
&lt;li&gt;牛顿迭代求平方根&lt;/li&gt;
&lt;li&gt;尾递归
    
    </summary>
    
      <category term="Programming" scheme="http://michaelhuang.github.io/categories/Programming/"/>
    
    
      <category term="Scala" scheme="http://michaelhuang.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>ssh local forwarding</title>
    <link href="http://michaelhuang.github.io/2016/06/20/ssh-local-forwarding/"/>
    <id>http://michaelhuang.github.io/2016/06/20/ssh-local-forwarding/</id>
    <published>2016-06-20T12:40:50.000Z</published>
    <updated>2017-06-29T07:17:14.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Navicat(localhost) =====&amp;gt; host_a =====&amp;gt; host_b =====&amp;gt; host_database&lt;/code&gt;&lt;br&gt;如何跨越host_a，host_b实现本地直连host_database?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;host-a做端口映射&quot;&gt;&lt;a href=&quot;#host-a做端口映射&quot; class=&quot;headerlink&quot; title=&quot;host_a做端口映射&quot;&gt;&lt;/a&gt;host_a做端口映射&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt;NL 0.0.0.0:10588:127.0.0.1:22 user@host_b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样&lt;code&gt;ssh user@host_a -p 10588&lt;/code&gt;就会直连到host_b&lt;/p&gt;
&lt;div class=&quot;tip&quot;&gt;&lt;br&gt;&lt;code&gt;0.0.0.0&lt;/code&gt;表示其他机器通过连接host_a:10588也能连到host_b&lt;br&gt;&lt;/div&gt;

&lt;h2 id=&quot;Navicat走ssh-tunnel&quot;&gt;&lt;a href=&quot;#Navicat走ssh-tunnel&quot; class=&quot;headerlink&quot; title=&quot;Navicat走ssh tunnel&quot;&gt;&lt;/a&gt;Navicat走ssh tunnel&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://michaelhuang.qiniudn.com/navicat-ssh-tunnel.png&quot; alt=&quot;navicat-ssh-tunnel&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;根据端口查看进程&quot;&gt;&lt;a href=&quot;#根据端口查看进程&quot; class=&quot;headerlink&quot; title=&quot;根据端口查看进程&quot;&gt;&lt;/a&gt;根据端口查看进程&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# command 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;netstat -lnp | grep 10588&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# command 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lsof -Pnl +M -i4 | grep 10588&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pentestmonkey.net/cheat-sheet/ssh-cheat-sheet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ssh-cheat-sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Navicat(localhost) =====&amp;gt; host_a =====&amp;gt; host_b =====&amp;gt; host_database&lt;/code&gt;&lt;br&gt;如何跨越host_a，host_b实现本地直连host_database?&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://michaelhuang.github.io/categories/Tips/"/>
    
    
      <category term="ssh" scheme="http://michaelhuang.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>MIT线代笔记</title>
    <link href="http://michaelhuang.github.io/2016/06/06/MIT_linear/"/>
    <id>http://michaelhuang.github.io/2016/06/06/MIT_linear/</id>
    <published>2016-06-06T14:08:08.000Z</published>
    <updated>2017-06-29T08:52:13.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;醍醐灌顶！大师告诉你WHY！以前学的都是HOW，哎，日了狗了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;高斯消元法：矩阵左乘行向量实现消元&lt;/p&gt;
&lt;p&gt;以空间向量的角度来思考矩阵乘法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左乘行向量表示对原矩阵的行向量进行线性组合&lt;/li&gt;
&lt;li&gt;右乘列向量表示对原矩阵的列向量进行线性组合&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$&lt;br&gt;\begin{bmatrix}&lt;br&gt;columns1 &amp;amp; columns2 &amp;amp; columns3 \\&lt;br&gt;columns1 &amp;amp; columns2 &amp;amp; columns3 \\&lt;br&gt;columns1 &amp;amp; columns2 &amp;amp; columns3&lt;br&gt;\end{bmatrix}&lt;br&gt;\begin{bmatrix}&lt;br&gt;3 \\&lt;br&gt;4 \\&lt;br&gt;5&lt;br&gt;\end{bmatrix}&lt;br&gt;=&lt;br&gt;\begin{bmatrix}&lt;br&gt;3*columns1 \\&lt;br&gt;4*columns1 \\&lt;br&gt;5*columns1&lt;br&gt;\end{bmatrix} \tag{1}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;\left( \begin{array}{ccc}&lt;br&gt;a &amp;amp; b &amp;amp; c \&lt;br&gt;d &amp;amp; e &amp;amp; f \&lt;br&gt;g &amp;amp; h &amp;amp; i&lt;br&gt;\end{array} \right)&lt;br&gt;$$&lt;br&gt;is given by the formula&lt;br&gt;$$&lt;br&gt;\chi(\lambda) = \left| \begin{array}{ccc}&lt;br&gt;\lambda - a &amp;amp; -b &amp;amp; -c \&lt;br&gt;-d &amp;amp; \lambda - e &amp;amp; -f \&lt;br&gt;-g &amp;amp; -h &amp;amp; \lambda - i&lt;br&gt;\end{array} \right|.&lt;br&gt;$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the result of multiplying a matrix by some vector is a combination of the columns of the matrix&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;待续…&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;醍醐灌顶！大师告诉你WHY！以前学的都是HOW，哎，日了狗了&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Math" scheme="http://michaelhuang.github.io/categories/Math/"/>
    
    
      <category term="linear algebra" scheme="http://michaelhuang.github.io/tags/linear-algebra/"/>
    
      <category term="MIT" scheme="http://michaelhuang.github.io/tags/MIT/"/>
    
  </entry>
  
  <entry>
    <title>Spring test dbunit</title>
    <link href="http://michaelhuang.github.io/2016/04/20/Spring-test-dbunit/"/>
    <id>http://michaelhuang.github.io/2016/04/20/Spring-test-dbunit/</id>
    <published>2016-04-20T14:34:02.000Z</published>
    <updated>2017-06-29T07:19:57.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;如何基于 &lt;code&gt;Spring testing framework + DBUnit&lt;/code&gt; 简单实现一个自动化测试工具？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@DataSets&lt;/span&gt;(setUpDataSet = &lt;span class=&quot;string&quot;&gt;&quot;setUp.xls&quot;&lt;/span&gt;, expectDataSet = &lt;span class=&quot;string&quot;&gt;&quot;expect.xls&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试方法执行前，先load&lt;code&gt;setUp.xls&lt;/code&gt;中数据到测试库，测试方法结束后，自动和&lt;code&gt;expect.xls&lt;/code&gt;中数据做比对；excel里面保存的是表的数据，多个表以多个sheet页形式体现，&lt;code&gt;sheet name&lt;/code&gt;即是&lt;code&gt;table name&lt;/code&gt;；其实github上已经有个功能非常完善的工具&lt;a href=&quot;http://springtestdbunit.github.io/spring-test-dbunit/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring Test DBUnit&lt;/a&gt;，这里只是说下大体实现思路&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;定义注解&quot;&gt;&lt;a href=&quot;#定义注解&quot; class=&quot;headerlink&quot; title=&quot;定义注解&quot;&gt;&lt;/a&gt;定义注解&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Target&lt;/span&gt;(ElementType.METHOD)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; DataSets &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;setUpDataSet&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;expectDataSet&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;初始化XlsFileLoader和DataSourceDatabaseTester&quot;&gt;&lt;a href=&quot;#初始化XlsFileLoader和DataSourceDatabaseTester&quot; class=&quot;headerlink&quot; title=&quot;初始化XlsFileLoader和DataSourceDatabaseTester&quot;&gt;&lt;/a&gt;初始化XlsFileLoader和DataSourceDatabaseTester&lt;/h2&gt;&lt;p&gt;&lt;code&gt;dbunit-2.4.8&lt;/code&gt;中已经有现成的&lt;code&gt;org.dbunit.util.fileloader.XlsDataFileLoader&lt;/code&gt;，蛋疼的是它是从&lt;code&gt;getClass().getResource(filename)&lt;/code&gt;加载，建议重写一个，从&lt;code&gt;ClassPathResource(filename).getURL()&lt;/code&gt;加载&lt;/p&gt;
&lt;p&gt;一般项目构建都会配置&lt;code&gt;dataSource&lt;/code&gt;，所以用&lt;code&gt;DataSourceDatabaseTester&lt;/code&gt;再合适不过，它来管理测试过程中数据库连接的创建销毁，以及最最重要的，根据具体&lt;code&gt;DatabaseOperation&lt;/code&gt;处理数据集；有个地方要注意一下，连接属性最好设置一下数据库类型，方式是实现&lt;code&gt;IOperationListener&lt;/code&gt;接口中&lt;code&gt;connectionRetrieved()&lt;/code&gt;加入下面代码，这个方法会在每次new或retrieved一个连接后立即调用&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;connection.getConfig().setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MySqlDataTypeFactory())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置bean&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@ImportResource&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;classpath:/application-root-bean.xml&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Profile&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServiceTestConfig&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  DataSource dataSource;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;(name=&lt;span class=&quot;string&quot;&gt;&quot;databaseTester&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DataSourceDatabaseTester &lt;span class=&quot;title&quot;&gt;dataSourceDatabaseTester&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DataSourceDatabaseTester databaseTester = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DataSourceDatabaseTester(dataSource());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    databaseTester.setOperationListener(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CustOperationListener());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; databaseTester;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;(name=&lt;span class=&quot;string&quot;&gt;&quot;xlsDataFileLoader&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; CustomXlsFileLoader &lt;span class=&quot;title&quot;&gt;xlsDataFileLoader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CustomXlsFileLoader();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;实现TestExecutionListener&quot;&gt;&lt;a href=&quot;#实现TestExecutionListener&quot; class=&quot;headerlink&quot; title=&quot;实现TestExecutionListener&quot;&gt;&lt;/a&gt;实现TestExecutionListener&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先&lt;code&gt;prepareTestInstance()&lt;/code&gt;中&lt;code&gt;DI&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;接着&lt;code&gt;beforeTestMethod()&lt;/code&gt;中加载&lt;code&gt;setUpDataSet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最后&lt;code&gt;afterTestMethod()&lt;/code&gt;中比对&lt;code&gt;expectDataSet&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServiceTestExecutionListener&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestExecutionListener&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; IDatabaseTester databaseTester;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; CustomXlsFileLoader xlsFileLoader;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; IDataSet expectDataSet;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prepareTestInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TestContext testCtx)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    databaseTester = (IDatabaseTester) testCtx.getApplicationContext().getBean(&lt;span class=&quot;string&quot;&gt;&quot;databaseTester&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xlsFileLoader = (CustomXlsFileLoader) testCtx.getApplicationContext().getBean(&lt;span class=&quot;string&quot;&gt;&quot;xlsDataFileLoader&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;beforeTestMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TestContext testCtx)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Check for existence of DataSets annotation for the method under testing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DataSets dataSetAnnotation = testCtx.getTestMethod().getAnnotation(DataSets.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( dataSetAnnotation == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String dataSetName = dataSetAnnotation.setUpDataSet();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( ! &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;.equals(dataSetName) ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      IDataSet dataSet = xlsFileLoader.load(dataSetName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      databaseTester.setDataSet(dataSet);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      databaseTester.onSetup();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String expectDataName = dataSetAnnotation.expectDataSet();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( ! &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;.equals(expectDataName)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      expectDataSet = xlsFileLoader.load(expectDataName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;afterTestMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TestContext testCtx)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; != expectDataSet &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; != databaseTester) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        IDatabaseConnection connection = databaseTester.getConnection();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        connection.getConfig().setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MySqlDataTypeFactory());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        IDataSet actualDataSet = connection.createDataSet();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Assert.assertNotNull(actualDataSet);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (String tableName : expectDataSet.getTableNames()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;// 以expectDataSet中字段为准，比如CREATE_TIME, MODIFY_TIME这种字段比较是没有意义的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ITable filteredTable = DefaultColumnFilter.includedColumnsTable(actualDataSet.getTable(tableName),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            expectDataSet.getTableMetaData(tableName).getColumns());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          Assertion.assertEquals(expectDataSet.getTable(tableName), filteredTable);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Clear up testing data if exists&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (databaseTester != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        databaseTester.onTearDown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;beforeTestClass&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TestContext testCtx)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;afterTestClass&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TestContext testCtx)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;配置使用&quot;&gt;&lt;a href=&quot;#配置使用&quot; class=&quot;headerlink&quot; title=&quot;配置使用&quot;&gt;&lt;/a&gt;配置使用&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RunWith&lt;/span&gt;(SpringJUnit4ClassRunner.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@ContextConfiguration&lt;/span&gt;(classes = &amp;#123;ServiceTestConfig.class&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@TestExecutionListeners&lt;/span&gt;(&amp;#123;ServiceTestExecutionListener.class&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@ActiveProfiles&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractServiceTest&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractTransactionalJUnit4SpringContextTests&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://dbunit.sourceforge.net/howto.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DBUnit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.shenyanchao.cn/blog/2013/06/27/usage-dbunit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DBUnit使用案例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/TestExecutionListener.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring TestExecutionListener&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/webservices/ws-springjava/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;纯Java配置bean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/testing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;spring-framework-reference-testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如何基于 &lt;code&gt;Spring testing framework + DBUnit&lt;/code&gt; 简单实现一个自动化测试工具？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@DataSets&lt;/span&gt;(setUpDataSet = &lt;span class=&quot;string&quot;&gt;&quot;setUp.xls&quot;&lt;/span&gt;, expectDataSet = &lt;span class=&quot;string&quot;&gt;&quot;expect.xls&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试方法执行前，先load&lt;code&gt;setUp.xls&lt;/code&gt;中数据到测试库，测试方法结束后，自动和&lt;code&gt;expect.xls&lt;/code&gt;中数据做比对；excel里面保存的是表的数据，多个表以多个sheet页形式体现，&lt;code&gt;sheet name&lt;/code&gt;即是&lt;code&gt;table name&lt;/code&gt;；其实github上已经有个功能非常完善的工具&lt;a href=&quot;http://springtestdbunit.github.io/spring-test-dbunit/index.html&quot;&gt;Spring Test DBUnit&lt;/a&gt;，这里只是说下大体实现思路&lt;/p&gt;
    
    </summary>
    
      <category term="TDD" scheme="http://michaelhuang.github.io/categories/TDD/"/>
    
    
      <category term="Spring" scheme="http://michaelhuang.github.io/tags/Spring/"/>
    
      <category term="dbunit" scheme="http://michaelhuang.github.io/tags/dbunit/"/>
    
  </entry>
  
  <entry>
    <title>Data Ingestion</title>
    <link href="http://michaelhuang.github.io/2016/04/15/Hadoop-learning-notes-Data-Ingestion/"/>
    <id>http://michaelhuang.github.io/2016/04/15/Hadoop-learning-notes-Data-Ingestion/</id>
    <published>2016-04-14T16:38:02.000Z</published>
    <updated>2017-06-29T07:21:57.000Z</updated>
    
    <content type="html">&lt;p&gt;数据导入的时候需要考虑哪些因素? &lt;code&gt;No Silver Bullet.&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么数据类型？数据格式是否和已用的查询处理工具兼容？&lt;/li&gt;
&lt;li&gt;预估文件大小如何？是否均匀分布？会不会有大量的小文件？&lt;/li&gt;
&lt;li&gt;schema是否要频繁变更？&lt;/li&gt;
&lt;li&gt;查询的时候倾向于就那么几列，还是所有列？&lt;/li&gt;
&lt;li&gt;数据导入速度要求，及下游使用（比如查询）可容忍程度如何？&lt;/li&gt;
&lt;li&gt;集群平台自建？还是别的厂商？&lt;br&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Data-Ingestion-Considerations&quot;&gt;&lt;a href=&quot;#Data-Ingestion-Considerations&quot; class=&quot;headerlink&quot; title=&quot;Data Ingestion Considerations&quot;&gt;&lt;/a&gt;Data Ingestion Considerations&lt;/h2&gt;&lt;h3 id=&quot;Timeliness-of-data-ingestion-and-accessibility&quot;&gt;&lt;a href=&quot;#Timeliness-of-data-ingestion-and-accessibility&quot; class=&quot;headerlink&quot; title=&quot;Timeliness of data ingestion and accessibility&quot;&gt;&lt;/a&gt;Timeliness of data ingestion and accessibility&lt;/h3&gt;&lt;p&gt;数据导入频率什么级别，需要多久能供下游使用？&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;classifications&lt;/th&gt;
&lt;th&gt;timeliness requirements&lt;/th&gt;
&lt;th&gt;tools&lt;/th&gt;
&lt;th&gt;storage layer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Macro batch&lt;/td&gt;
&lt;td&gt;&amp;gt;    15 minutes&lt;/td&gt;
&lt;td&gt;Sqoop, file transfers&lt;/td&gt;
&lt;td&gt;HDFS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Microbatch&lt;/td&gt;
&lt;td&gt;&amp;gt;     2 minutes&lt;/td&gt;
&lt;td&gt;Sqoop, file transfers&lt;/td&gt;
&lt;td&gt;HDFS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Near-Real-Time Decision Support&lt;/td&gt;
&lt;td&gt;&amp;gt;     2 seconds&lt;/td&gt;
&lt;td&gt;Flume, Kafka&lt;/td&gt;
&lt;td&gt;HBase, Elasticsearch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Near-Real-Time Event Processing&lt;/td&gt;
&lt;td&gt;&amp;gt;   100 milliseconds&lt;/td&gt;
&lt;td&gt;Flume, Kafka&lt;/td&gt;
&lt;td&gt;HBase, Elasticsearch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Real Time&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;custom&lt;/td&gt;
&lt;td&gt;custom&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;Storage-format&quot;&gt;&lt;a href=&quot;#Storage-format&quot; class=&quot;headerlink&quot; title=&quot;Storage format&quot;&gt;&lt;/a&gt;Storage format&lt;/h3&gt;&lt;p&gt;存储格式主要这几种，纯文本，Hadoop原生的Sequence File，序列化Avro，列存储Parquet和ORC(optimized RCFile)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;format&lt;/th&gt;
&lt;th&gt;size&lt;/th&gt;
&lt;th&gt;read&lt;/th&gt;
&lt;th&gt;write&lt;/th&gt;
&lt;th&gt;feature&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;+++++&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;+++++&lt;/td&gt;
&lt;td&gt;convenient format, human readable&lt;br&gt;not support block compression&lt;br&gt;Store is bulky and not as efficient to query&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sequence File&lt;/td&gt;
&lt;td&gt;+++&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;+++&lt;/td&gt;
&lt;td&gt;Is row oriented format&lt;br&gt;Supports splitting even if the data is compressed&lt;br&gt;Can be used to pack small files in hadoop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Avro&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;+++&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;Is row oriented binary format&lt;br&gt;Better schema evolution&lt;br&gt;Self-describing and language-independent schema(JSON), the file contain the schema in addition to the data&lt;br&gt;Support block compression and are splittable&lt;br&gt;Compact and fast binary format, widely used as a serialization platform&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Parquet&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;+++++&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;Is column oriented binary format&lt;br&gt;Slow in writing but fast in reading&lt;br&gt;Optimized and efficient in terms of disk I/O when specific columns need to be queried&lt;br&gt;Supports compression&lt;br&gt;Support limited schema evolution, new columns can be added at the end of the structure&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ORC&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;+++++&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;like Parquet, but designed specifically for Hive, not a general-purpose storage format&lt;br&gt;Not support schema evolution&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;频繁变更的，比如schema、查询结果字段集，Avro更合适；如果查询结果集字段很固定，对写入速度没有要求，Parquet更合适；只想快速导入到HDFS，Text无疑是最快的，但是通常情况下没有人会这样做，比如xml，not splittable，意味着不能并行处理，再就是很耗磁盘网络IO，通常都要压缩，但是又不支持block compression(压缩后not splittable)；ORC是HortonWorks开发的，厂商竞争导致Cloudera Impala用不了，所以Cloudera和twitter一起搞出个Parquet；SequenceFiles类似于csv，但是支持block compression，通常作为MapReduce jobs的过程存储；&lt;/p&gt;
&lt;p&gt;格式的选择没那么绝对，选了这个，就不能选那个了，通常都会配合使用，比如processing阶段使用SequenceFiles，query阶段使用Parquet，extract可能选择csv(方便导入数据库)&lt;/p&gt;
&lt;h3 id=&quot;Codecs&quot;&gt;&lt;a href=&quot;#Codecs&quot; class=&quot;headerlink&quot; title=&quot;Codecs&quot;&gt;&lt;/a&gt;Codecs&lt;/h3&gt;&lt;p&gt;压缩格式如何选择？&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;codecs&lt;/th&gt;
&lt;th&gt;size&lt;/th&gt;
&lt;th&gt;compression speed&lt;/th&gt;
&lt;th&gt;decompression speed&lt;/th&gt;
&lt;th&gt;splittable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Snappy&lt;/td&gt;
&lt;td&gt;+++++&lt;/td&gt;
&lt;td&gt;++++&lt;/td&gt;
&lt;td&gt;++++++&lt;/td&gt;
&lt;td&gt;not inherently splittable, need a container format like SequenceFiles or Avro&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LZO&lt;/td&gt;
&lt;td&gt;++++&lt;/td&gt;
&lt;td&gt;++++&lt;/td&gt;
&lt;td&gt;+++++&lt;/td&gt;
&lt;td&gt;splittable, requires an additional indexing step&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gzip&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;+++&lt;/td&gt;
&lt;td&gt;not inherently splittable, need a container format like SequenceFiles or Avro&lt;br&gt;using smaller blocks can lead to better performance&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bzip2&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;inherently splittable&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;从表中可以看出，大多数情况hot data使用Snappy即可，如果是纯文本则使用LZO会更方便一些；cold data建议Gzip；追求更高的压缩比建议bzip2&lt;/p&gt;
&lt;h3 id=&quot;Incremental-updates&quot;&gt;&lt;a href=&quot;#Incremental-updates&quot; class=&quot;headerlink&quot; title=&quot;Incremental updates&quot;&gt;&lt;/a&gt;Incremental updates&lt;/h3&gt;&lt;p&gt;新数据以什么形式落地？append or need modifying existing data?&lt;br&gt;只是append，那直接灌到HDFS即可；如果需要merge，对于HDFS来说，需要一个Compact job，对增量数据和现有数据做merge，比如用Hive的left join&lt;/p&gt;
&lt;h3 id=&quot;Data-access-pattern&quot;&gt;&lt;a href=&quot;#Data-access-pattern&quot; class=&quot;headerlink&quot; title=&quot;Data access pattern&quot;&gt;&lt;/a&gt;Data access pattern&lt;/h3&gt;&lt;p&gt;batch processing jobs? Or is random access?&lt;br&gt;如果是大量的扫描批处理，那HDFS更合适；如果是随机的访问数据，那NoSQL(比如Hbase)更合适&lt;/p&gt;
&lt;h3 id=&quot;Source-system-and-data-structure&quot;&gt;&lt;a href=&quot;#Source-system-and-data-structure&quot; class=&quot;headerlink&quot; title=&quot;Source system and data structure&quot;&gt;&lt;/a&gt;Source system and data structure&lt;/h3&gt;&lt;p&gt;数据源类型：RDBMS or Logs？数据类型：structured、semistructured or unstructured?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alexholmes/hdfs-file-slurper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hdfs-file-slurper&lt;/a&gt;&lt;br&gt;轻量级传输工具，多并发，单机多实例，简单容错处理，LZO压缩，定制脚本等&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sqoop.apache.org/docs/1.99.1/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sqoop&lt;/a&gt;&lt;br&gt;Hadoop和RDBMS间批量传输利器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://flume.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flume&lt;/a&gt;&lt;br&gt;日志收集利器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kafka.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kafka&lt;/a&gt;和&lt;a href=&quot;https://www.elastic.co/products/logstash&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;logstash&lt;/a&gt;&lt;br&gt;再加上Elasticsearch, elk日志收集黄金搭档！&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Network-Bottlenecks&quot;&gt;&lt;a href=&quot;#Network-Bottlenecks&quot; class=&quot;headerlink&quot; title=&quot;Network Bottlenecks&quot;&gt;&lt;/a&gt;Network Bottlenecks&lt;/h3&gt;&lt;p&gt;做好监控，网卡瓶颈，传输数据压缩&lt;/p&gt;
&lt;h3 id=&quot;Network-Security&quot;&gt;&lt;a href=&quot;#Network-Security&quot; class=&quot;headerlink&quot; title=&quot;Network Security&quot;&gt;&lt;/a&gt;Network Security&lt;/h3&gt;&lt;p&gt;数据脱敏，加密解密；如果用Flume，agents之间传输数据支持加密的；用Kafka就需要额外的处理过程&lt;/p&gt;
&lt;h3 id=&quot;Failure-Handling&quot;&gt;&lt;a href=&quot;#Failure-Handling&quot; class=&quot;headerlink&quot; title=&quot;Failure Handling&quot;&gt;&lt;/a&gt;Failure Handling&lt;/h3&gt;&lt;p&gt;容错机制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传输10个文件，如果有一个失败了，能否知道是哪个，这样重传的时候只需要传这个失败的就行了&lt;/li&gt;
&lt;li&gt;用dfs put传输一个10G大小的文件，传完9G时断了，就得重头来&lt;/li&gt;
&lt;li&gt;走队列传，可能会导致一条记录duplicate，接收端需要去重&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Level-of-Complexity&quot;&gt;&lt;a href=&quot;#Level-of-Complexity&quot; class=&quot;headerlink&quot; title=&quot;Level of Complexity&quot;&gt;&lt;/a&gt;Level of Complexity&lt;/h3&gt;&lt;p&gt;复杂程度：不要把问题过于复杂化；比如说就是想简单传几个文件上去，就没必要非得搞个Flume或者Kafka集群，直接fs put不就行了；&lt;/p&gt;
&lt;p&gt;好的设计不是大而全，而是简而美；不要总想还能加什么，而是可以砍掉什么&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.manning.com/books/hadoop-in-action-second-edition&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hadoop in Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/0636920033196.do&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hadoop Application Architectures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/0636920033448.do&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hadoop: The Definitive Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/StampedeCon/choosing-an-hdfs-data-storage-format-avro-vs-parquet-and-more-stampedecon-2015&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Choosing an HDFS data storage format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.inquidia.com/news-and-info/hadoop-file-formats-its-not-just-csv-anymore&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hadoop File Formats: It’s not just CSV anymore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/pulse/100-open-source-big-data-architecture-papers-anil-madan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;100 open source Big Data architecture papers for data professionals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ning/jvm-compressor-benchmark/wiki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jvm compressor benchmark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;数据导入的时候需要考虑哪些因素? &lt;code&gt;No Silver Bullet.&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么数据类型？数据格式是否和已用的查询处理工具兼容？&lt;/li&gt;
&lt;li&gt;预估文件大小如何？是否均匀分布？会不会有大量的小文件？&lt;/li&gt;
&lt;li&gt;schema是否要频繁变更？&lt;/li&gt;
&lt;li&gt;查询的时候倾向于就那么几列，还是所有列？&lt;/li&gt;
&lt;li&gt;数据导入速度要求，及下游使用（比如查询）可容忍程度如何？&lt;/li&gt;
&lt;li&gt;集群平台自建？还是别的厂商？&lt;br&gt;…&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://michaelhuang.github.io/categories/BigData/"/>
    
    
      <category term="Data Ingestion" scheme="http://michaelhuang.github.io/tags/Data-Ingestion/"/>
    
      <category term="Hadoop" scheme="http://michaelhuang.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hive自定义文件读取</title>
    <link href="http://michaelhuang.github.io/2016/04/03/hive_two/"/>
    <id>http://michaelhuang.github.io/2016/04/03/hive_two/</id>
    <published>2016-04-03T13:08:36.000Z</published>
    <updated>2017-06-29T09:10:55.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;考虑这么个场景：某天你leader过来跟你说，我这现在有大量文本文件，大小不一，大的好几十G，小的几百兆；现在想提取出来共有的几个业务字段做分析，但是每种类型的接口文件的字段解析规则还不一样，比如业务字段A，在file1里面在第10字节到18字节之间，在file2中在第8字节到第16字节之间，问你怎么办？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;如果有现成的hdfs集群，其实这事儿用&lt;code&gt;Hive自定义文件读取&lt;/code&gt;这个特性会非常省事儿！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://michaelhuang.qiniudn.com/hive-serde.jpg&quot; alt=&quot;hive-serde&quot;&gt;&lt;/p&gt;
&lt;p&gt;文件如何读取（&lt;code&gt;inputformat&lt;/code&gt;），读取的内容如何解析（&lt;code&gt;serde&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;你会发现，你只需要实现几个简单的类，篇头问题即迎刃而解&lt;/p&gt;
&lt;h2 id=&quot;Inputformat&quot;&gt;&lt;a href=&quot;#Inputformat&quot; class=&quot;headerlink&quot; title=&quot;Inputformat&quot;&gt;&lt;/a&gt;Inputformat&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;既然处理文本，当然&lt;code&gt;org.apache.hadoop.mapred.TextInputFormat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只需实现接口，把Split传给&lt;code&gt;RecordReader&lt;/code&gt;，具体文本切分规则交给&lt;code&gt;RecordReader&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://michaelhuang.qiniudn.com/hive/XFileInputFormat.png&quot; alt=&quot;XFileInputFormat&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;RecordReader&quot;&gt;&lt;a href=&quot;#RecordReader&quot; class=&quot;headerlink&quot; title=&quot;RecordReader&quot;&gt;&lt;/a&gt;RecordReader&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;主要逻辑在&lt;code&gt;next()&lt;/code&gt;中，通过&lt;code&gt;LineRecordReader&lt;/code&gt;解析Split，然后生成原始row&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LongWritable key, Text value)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// get current line&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.reader.next(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.lineKey, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.lineValue)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    key.set(key.get() + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lineValue.append(byteOfSplitName, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, byteOfSplitName.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value.set(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.lineValue.getBytes());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//Text.validateUTF8(value.getBytes());&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://michaelhuang.qiniudn.com/hive/XRecordReader.png&quot; alt=&quot;XRecordReader&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Serde&quot;&gt;&lt;a href=&quot;#Serde&quot; class=&quot;headerlink&quot; title=&quot;Serde&quot;&gt;&lt;/a&gt;Serde&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;负责把每一个原生row根据业务规则解析成多个field，这才产出一条有意义的record&lt;/li&gt;
&lt;li&gt;&lt;code&gt;initialize()&lt;/code&gt;初始化，根据表schema定义，确定好有哪些列，每一列都是什么类型&lt;/li&gt;
&lt;li&gt;我们只想读取，所以只需实现&lt;code&gt;deserialize()&lt;/code&gt;接口&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://db3.iteye.com/blog/1072778&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ObjectInspector&lt;/a&gt;很精髓！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://michaelhuang.qiniudn.com/hive/XSerDe.png&quot; alt=&quot;XSerDe&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Hive-Sql-定义&quot;&gt;&lt;a href=&quot;#Hive-Sql-定义&quot; class=&quot;headerlink&quot; title=&quot;Hive Sql 定义&quot;&gt;&lt;/a&gt;Hive Sql 定义&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hive -e &amp;quot;CREATE EXTERNAL TABLE IF NOT EXISTS khala_his.dwd_acco_his&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c_clientid STRING,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c_custname STRING,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  d_datadate DATE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PARTITIONED BY (year INT, month INT, day INT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ROW FORMAT SERDE &amp;apos;com.michael.hive.XSerDe&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;STORED AS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  INPUTFORMAT &amp;apos;com.michael.hive.XFileInputFormat&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  OUTPUTFORMAT &amp;apos;com.michael.hive.XFileOutputFormat&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOCATION &amp;apos;/data/khala/his/dwd_acco_his&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Answer&quot;&gt;&lt;a href=&quot;#Answer&quot; class=&quot;headerlink&quot; title=&quot;Answer&quot;&gt;&lt;/a&gt;Answer&lt;/h2&gt;&lt;p&gt;说到这，还有个关键问题没解决，如何解决同一表schema适配不同文本文件呢？只需两步&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RecordReader&lt;/code&gt;把文件名&lt;code&gt;split.getPath().getName()&lt;/code&gt;拼到每一个row末尾，相当于加一个虚拟列，用来索引对应row解析规则&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SerDe&lt;/code&gt;解析字段规则时，根据虚拟列获取到解析规则，然后解析即可&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;org.apache.hadoop.io.Text&lt;/code&gt;标准UTF8编码，如果你的文本不是UTF8，生成row时要用&lt;code&gt;getBytes()&lt;/code&gt;，非&lt;code&gt;toString()&lt;/code&gt;；&lt;br&gt;解析类型时候，DECIMAL要用HiveDecimal.create(BigDecimal decimal)，DATE用java.sql.Date()&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cwiki.apache.org/confluence/display/Hive/SerDe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Hive Serde&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.dummies.com/how-to/content/defining-table-record-formats-in-hive.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;defining table record formats in Hive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.coder4.com/archives/4031&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hive中的InputFormat、OutputFormat与SerDe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;考虑这么个场景：某天你leader过来跟你说，我这现在有大量文本文件，大小不一，大的好几十G，小的几百兆；现在想提取出来共有的几个业务字段做分析，但是每种类型的接口文件的字段解析规则还不一样，比如业务字段A，在file1里面在第10字节到18字节之间，在file2中在第8字节到第16字节之间，问你怎么办？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://michaelhuang.github.io/categories/BigData/"/>
    
    
      <category term="hive" scheme="http://michaelhuang.github.io/tags/hive/"/>
    
  </entry>
  
  <entry>
    <title>Hive实现拉链存储</title>
    <link href="http://michaelhuang.github.io/2016/04/01/hive_one/"/>
    <id>http://michaelhuang.github.io/2016/04/01/hive_one/</id>
    <published>2016-04-01T13:30:20.000Z</published>
    <updated>2017-06-29T07:24:05.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;什么是拉链存储？数据仓库经常用到，通过给record增加两个字段: 生效日期、失效日期，来记录数据的生命周期变化；好处是既节省存储空间，又保证历史数据变化的完整性，最重要的还能快速访问不同时段的数据快照&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;那为什么叫拉链呢？因为每回新更新record进来后，都会对旧record进行闭链（更改失效日期），同时对新record开链（更改生效日期），就像链条一样，一环扣一环&lt;/p&gt;
&lt;p&gt;下面以用户数据为例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://michaelhuang.qiniudn.com/hive-lalian01.png&quot; alt=&quot;用户基本信息&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://michaelhuang.qiniudn.com/hive-lalian02.png&quot; alt=&quot;数据一生&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://michaelhuang.qiniudn.com/hive-lalian03.png&quot; alt=&quot;加入拉链日期&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://michaelhuang.qiniudn.com/hive-lalian04.png&quot; alt=&quot;取某天快照&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://michaelhuang.qiniudn.com/hive-lalian05.png&quot; alt=&quot;取一段时间快照&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Hive-ODPS实现方法&quot;&gt;&lt;a href=&quot;#Hive-ODPS实现方法&quot; class=&quot;headerlink&quot; title=&quot;Hive/ODPS实现方法&quot;&gt;&lt;/a&gt;Hive/ODPS实现方法&lt;/h2&gt;&lt;p&gt;Hive两个特性：&lt;code&gt;only write once&lt;/code&gt;, &lt;code&gt;schema on read&lt;/code&gt;&lt;br&gt;一般来说存储底层是HDFS（当然有可能是spark或其他，本文不考虑），所以是做不了update的，update成本都不如覆盖重写了，可以考虑利用&lt;a href=&quot;https://cwiki.apache.org/confluence/display/Hive/LanguageManual+WindowingAndAnalytics&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LEAD Function&lt;/a&gt;解决&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PRIMARY_KEY,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        EFFECTIVE_DT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;CASE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;LEAD&lt;/span&gt;(EFFECTIVE_DT,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;OVER&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              (&lt;span class=&quot;keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; PRIMARY_KEY &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; EFFECTIVE_DT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;LEAD&lt;/span&gt;(EFFECTIVE_DT,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;OVER&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              (&lt;span class=&quot;keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; PRIMARY_KEY &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; EFFECTIVE_DT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; EXPIRED_DT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        EVENT_VALUE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           PRIMARY_KEY,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           EFFECTIVE_DT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           EVENT_VALUE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           EXISTING_TIME_SERIES_TABLE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           EXPIRED_DT &lt;span class=&quot;keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;UNION&lt;/span&gt; ALL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           PRIMARY_KEY,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           EFFECTIVE_DT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           EVENT_VALUE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; NEW_TIME_SERIES_TABLE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ) sub_1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;该方法不具有幂等性，重复执行会导致多出&lt;code&gt;EFFECTIVE_DT = EXPIRED_DT&lt;/code&gt;的数据；如果无法避免重复执行，子查询里面需要去重&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;什么是拉链存储？数据仓库经常用到，通过给record增加两个字段: 生效日期、失效日期，来记录数据的生命周期变化；好处是既节省存储空间，又保证历史数据变化的完整性，最重要的还能快速访问不同时段的数据快照&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://michaelhuang.github.io/categories/BigData/"/>
    
    
      <category term="hive" scheme="http://michaelhuang.github.io/tags/hive/"/>
    
  </entry>
  
  <entry>
    <title>锤子发布会</title>
    <link href="http://michaelhuang.github.io/2014/05/22/hammer/"/>
    <id>http://michaelhuang.github.io/2014/05/22/hammer/</id>
    <published>2014-05-22T12:55:30.000Z</published>
    <updated>2017-06-29T02:24:35.000Z</updated>
    
    <content type="html">&lt;p&gt;今天看了老罗的锤子专场单口相声，虽不是一个划时代的产品，但是不可否认，确实是个很认真，很有诚意，极具工匠精神的产品。除产品本身外，他那种解决问题的方式更让我印象深刻&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;关注细节，善于发现问题，并敢于刨根问题&quot;&gt;&lt;a href=&quot;#关注细节，善于发现问题，并敢于刨根问题&quot; class=&quot;headerlink&quot; title=&quot;关注细节，善于发现问题，并敢于刨根问题&quot;&gt;&lt;/a&gt;关注细节，善于发现问题，并敢于刨根问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;4000W像素拍出效果为何比不上800W？&lt;br&gt;同样装备富士通800W的两个手机，为何效果相差如此之大？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;资源整合能力&quot;&gt;&lt;a href=&quot;#资源整合能力&quot; class=&quot;headerlink&quot; title=&quot;资源整合能力&quot;&gt;&lt;/a&gt;资源整合能力&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一个英语老师，带着一帮“英语老师”，两年时间如何从零到发布锤子？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;人性化，化繁为简&quot;&gt;&lt;a href=&quot;#人性化，化繁为简&quot; class=&quot;headerlink&quot; title=&quot;人性化，化繁为简&quot;&gt;&lt;/a&gt;人性化，化繁为简&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;所有操作都是以人为主，以减少操作次数提高效率为宗旨，手机是被人玩，不是人被手机玩，目前国内大部分手机厂商都是一味拼参数，而完全忽视用户体验，这是舍本求末，利益熏心所致；这也可以看出好的产品经理有多么重要，不能只有逻辑思维编码能力，还要有审美能力，一定的艺术细菌，更重要的是要有对改善人类生活品质的强烈欲望和持久基情&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;不断接受反馈，不断否决自己，寻找完美解决方案&quot;&gt;&lt;a href=&quot;#不断接受反馈，不断否决自己，寻找完美解决方案&quot; class=&quot;headerlink&quot; title=&quot;不断接受反馈，不断否决自己，寻找完美解决方案&quot;&gt;&lt;/a&gt;不断接受反馈，不断否决自己，寻找完美解决方案&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;锤子系统从发布测试版到正式发布，不断的和用户互动，绞尽脑汁，全力优化解决每一个问题，能做到这一点，也不难，难的是能否一被子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;老罗一直都是高调做事，高调做人，两年前就告知世界：他，一个英语老师，才是乔布斯衣钵的唯一传人，当时的结果可想而知；其实，国内科技创业公司，早期这样高调，很容易死的很惨，锤子通过两年时间，走到今天，实属不易；不过，谁叫他是老罗，做事本来就不按套路，他要是早期夹着尾巴搞锤子，结果未必会有现在好&lt;/p&gt;
&lt;p&gt;最后老罗爆料他家人也被问候，确实感到很震撼，现实世界总是充满悲观主义，也从不缺少喷子，他们不喜欢变化，即使是好的思想，好的创新理念，也会选择逃避，甚至怒而击之&lt;/p&gt;
&lt;p&gt;喷子的使命：[我不行，你也得不行，你要行，我们就有权力集结起来，维护原来的秩序，一起喷死你]&lt;br&gt;毕竟不行的人占大多数，一人一口吐沫星子，也能淹死你&lt;/p&gt;
&lt;p&gt;科技在发展，社会在进步，可是人们的道德底线貌似在一次一次的刷新；为了“五毛钱”，什么事情都可以做出来&lt;/p&gt;
&lt;p&gt;世界如此险恶，你要内心强大&lt;/p&gt;
&lt;p&gt;革命尚未成功，锤子仍需努力，是中国创客的崛起，还是一种文化现象的绝唱？&lt;br&gt;拭目以待~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天看了老罗的锤子专场单口相声，虽不是一个划时代的产品，但是不可否认，确实是个很认真，很有诚意，极具工匠精神的产品。除产品本身外，他那种解决问题的方式更让我印象深刻&lt;/p&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://michaelhuang.github.io/categories/Thinking/"/>
    
    
      <category term="发布会" scheme="http://michaelhuang.github.io/tags/%E5%8F%91%E5%B8%83%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>好玩的ssh</title>
    <link href="http://michaelhuang.github.io/2014/04/02/ssh_two/"/>
    <id>http://michaelhuang.github.io/2014/04/02/ssh_two/</id>
    <published>2014-04-02T13:18:56.000Z</published>
    <updated>2017-06-29T09:00:30.000Z</updated>
    
    <content type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# git push 总特么timeout咋整&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 这个命令是用来调试用的，用来挖地址挺不错的, 我就挖到一个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh -vT git@github.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ~/.ssh/config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Host github.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  User git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  HostName 192.30.252.131&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;ssh-agent-forwarding&quot;&gt;&lt;a href=&quot;#ssh-agent-forwarding&quot; class=&quot;headerlink&quot; title=&quot;ssh agent forwarding&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.unixwiz.net/techtips/ssh-agent-forwarding.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ssh agent forwarding&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+---------+     git push        +---------+       git clone/pull      +---------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  client | =================&amp;gt;  |  github |    ==================&amp;gt;    |  server |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|         |                     |         |                           |         |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------+                     +---------+                           +---------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个特性，deploy server的时候很方便；只需要添加client端的公钥到github即可~&lt;br&gt;&lt;a href=&quot;https://developer.github.com/guides/using-ssh-agent-forwarding/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何配置请温柔地点击我&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;ssh-local-port-forwarding&quot;&gt;&lt;a href=&quot;#ssh-local-port-forwarding&quot; class=&quot;headerlink&quot; title=&quot;ssh local port forwarding&quot;&gt;&lt;/a&gt;ssh local port forwarding&lt;/h2&gt;&lt;p&gt;出于安全考虑，server常规接口一般都会屏蔽掉，只留下80/443(webservers)、22(ssh, 当然sshd_config中可以更换掉), 但是有时候可能需要连接数据库，比如mysql(3306)，但是本地3306接口被屏蔽掉了，如何破？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 连接本地10588接口即可连接远端mysql数据库_&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#   -f    _后台运行_&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#   -N    _禁止执行ssh remote command_&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#   -L    _本地接口定向_&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh -f -N -L 10588:127.0.0.1:3306 name@database.example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ~/.ssh/config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Host tunnel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  HostName database.example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  IdentityFile ~/.ssh/database.example.key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LocalForward 10588 127.0.0.1:3306&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  User name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh -f -N tunnel&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Well known ports&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;git-push总提示输入username-passwd&quot;&gt;&lt;a href=&quot;#git-push总提示输入username-passwd&quot; class=&quot;headerlink&quot; title=&quot;git push总提示输入username/passwd&quot;&gt;&lt;/a&gt;git push总提示输入username/passwd&lt;/h2&gt;&lt;p&gt;这是因为clone的时候用的https，改成ssh clone url&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git remote &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;-url origin git@github.com:username/repo.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;神器-OSX-Fuse&quot;&gt;&lt;a href=&quot;#神器-OSX-Fuse&quot; class=&quot;headerlink&quot; title=&quot;神器 OSX Fuse&quot;&gt;&lt;/a&gt;神器 &lt;a href=&quot;http://osxfuse.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OSX Fuse&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;scp这命令都知道啊，但是命令敲起来还是有点麻烦，能不能直接像操作本地文件系统一样操作远程文件那？装上他，只需要将远程文件夹挂载到本地指定文件路径即可实现&lt;/p&gt;
&lt;h2 id=&quot;vim-emacs-编辑远程文件&quot;&gt;&lt;a href=&quot;#vim-emacs-编辑远程文件&quot; class=&quot;headerlink&quot; title=&quot;vim / emacs 编辑远程文件&quot;&gt;&lt;/a&gt;vim / emacs 编辑远程文件&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://vim.wikia.com/wiki/Editing_remote_files_via_scp_in_vim&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;for vim&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Remote-Files.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;for emacs&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# git push 总特么timeout咋整&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 这个命令是用来调试用的，用来挖地址挺不错的, 我就挖到一个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh -vT git@github.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ~/.ssh/config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Host github.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  User git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  HostName 192.30.252.131&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://michaelhuang.github.io/categories/Tips/"/>
    
    
      <category term="ssh" scheme="http://michaelhuang.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>为何你的remote ssh command会报错</title>
    <link href="http://michaelhuang.github.io/2014/04/01/ssh_one/"/>
    <id>http://michaelhuang.github.io/2014/04/01/ssh_one/</id>
    <published>2014-04-01T13:18:56.000Z</published>
    <updated>2017-06-29T09:19:50.000Z</updated>
    
    <content type="html">&lt;p&gt;先说下这问题咋来的，目前开发流程如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------+       scp files...                     +-----------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| localhost     |  ===================================&amp;gt;  | remote host     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   for coding  |   remote ssh command for compiling     |   for compiling |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------+                                        +-----------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上图，代码是本地马吊们敲出来地，so文件是要放到远程开发环境编译出来地；&lt;br&gt;普通青年尼，可能是打开xshell，xftp，先把文件拖上去，然后ssh登陆编译环境，然后make;&lt;br&gt;效率极低不说，逼格也不够啊，于是乎就有了下面代码：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scp *&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;*.&amp;#123;gcc,h,pc,cpp&amp;#125; ya-dev:~/src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh ya-dev &lt;span class=&quot;string&quot;&gt;&#39;cd ~/src; ls &#39;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;*&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;*&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;.gcc  | xargs -I &amp;#123;&amp;#125; make -f &amp;#123;&amp;#125; ORA_VER=10&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;问题来了，远程执行会报错，部分lib库找不到；但是ssh登陆后再执行就没问题~&lt;br&gt;&lt;code&gt;ssh ya-dev env&lt;/code&gt; 一看，果然缺少很多环境变量，为什么会这样呢，这就要从爷爷粮票的故事讲起了~&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Shell-modes&quot;&gt;&lt;a href=&quot;#Shell-modes&quot; class=&quot;headerlink&quot; title=&quot;Shell modes&quot;&gt;&lt;/a&gt;Shell modes&lt;/h2&gt;&lt;p&gt;主要有以下两种模式&lt;/p&gt;
&lt;h3 id=&quot;login&quot;&gt;&lt;a href=&quot;#login&quot; class=&quot;headerlink&quot; title=&quot;login&quot;&gt;&lt;/a&gt;login&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;你打开一个shell或者terminal，提示输入用户名密码才能登陆，这就是个login shell&lt;/li&gt;
&lt;li&gt;如果你打开terminal就能直接用，那non-login shell(Mac OSX特殊一些)&lt;/li&gt;
&lt;li&gt;总玩ubuntu的应该知道，&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;F1&lt;/code&gt;  出来的就是个login shell&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;interactive&quot;&gt;&lt;a href=&quot;#interactive&quot; class=&quot;headerlink&quot; title=&quot;interactive&quot;&gt;&lt;/a&gt;interactive&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;你打开的shell有prompt，并且它的stdin、stderr都定向到terminal&lt;/li&gt;
&lt;li&gt;上面那是术语，名字就能看出来，互动嘛，你通过ssh登录远程机器，ssh server肯定要给你个pty吧，好让你执行命令&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Test&quot;&gt;&lt;a href=&quot;#Test&quot; class=&quot;headerlink&quot; title=&quot;Test&quot;&gt;&lt;/a&gt;Test&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;me@local-mac$  `[[ $- == *i* ]] &amp;amp;&amp;amp; echo &amp;apos;Interactive&amp;apos; || echo &amp;apos;Not interactive&amp;apos;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Interactive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;me@local-mac$  `shopt -q login_shell &amp;amp;&amp;amp; echo &amp;apos;Login shell&amp;apos; || echo &amp;apos;Not login shell&amp;apos;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Login shell    # 特殊 for mac osx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;me@local-mac$  `ssh ubuntu &amp;quot;[[ $- == *i* ]] &amp;amp;&amp;amp; echo &amp;apos;Interactive&amp;apos; || echo &amp;apos;Not interactive&amp;apos;&amp;quot;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Interactive    # 因为我用的terminal是interactive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;me@local-mac$  `ssh ubuntu &amp;quot;shopt -q login_shell &amp;amp;&amp;amp; echo &amp;apos;Login shell&amp;apos; || echo &amp;apos;Not login shell&amp;apos;&amp;quot;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not login shell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;me@local-ubuntu$ `[[ $- == *i* ]] &amp;amp;&amp;amp; echo &amp;apos;Interactive&amp;apos; || echo &amp;apos;Not interactive&amp;apos;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Interactive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;me@local-ubuntu$ `shopt -q login_shell &amp;amp;&amp;amp; echo &amp;apos;Login shell&amp;apos; || echo &amp;apos;Not login shell&amp;apos;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not login shell  # 有别于mac osx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;me@local-mac$ `bash test.sh`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not interactive  # bash script.sh：non-login,non-interactive; 说明ssh remote command 是 non-login,non-interactive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;me@local-mac$ `cat test.sh`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh ubuntu &amp;quot;[[ $- == *i* ]] &amp;amp;&amp;amp; echo &amp;apos;Interactive&amp;apos; || echo &amp;apos;Not interactive&amp;apos;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Shell-init-files&quot;&gt;&lt;a href=&quot;#Shell-init-files&quot; class=&quot;headerlink&quot; title=&quot;Shell init files&quot;&gt;&lt;/a&gt;Shell init files&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://wholetsthedogout.qiniudn.com/bash_init.png&quot; alt=&quot;how the bash load init files&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Answer&quot;&gt;&lt;a href=&quot;#Answer&quot; class=&quot;headerlink&quot; title=&quot;Answer&quot;&gt;&lt;/a&gt;Answer&lt;/h2&gt;&lt;p&gt;回到开篇问题，为什么少了很多环境变量那，从上图可以看出，俺的脚本是non-login,non-interactive&lt;br&gt;所以.bash_profile,.bashrc都没被执行到~&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用到的变量都加到&lt;code&gt;/etc/environment&lt;/code&gt;中，这个就是全局了，如果你不想影响其他用户，请看下一方法&lt;/li&gt;
&lt;li&gt;sshd_config配置项PermitUserEnvironment&lt;ul&gt;
&lt;li&gt;vim &lt;code&gt;/etc/sshd_config&lt;/code&gt;, add &lt;code&gt;&amp;#39;PermitUserEnvironment yes&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加变量到&lt;code&gt;~/.ssh/environment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;service ssh restart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh remote env&lt;/code&gt; 测试一下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$BASH_ENV&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;这个变量默认是空值，在哪有效设置让我有些迷惑&lt;/li&gt;
&lt;li&gt;你想想，放到&lt;code&gt;/etc/enviroment&lt;/code&gt;里吧，不如直接方法1了&lt;/li&gt;
&lt;li&gt;放到&lt;code&gt;~/.bash_profile ~/.bashrc&lt;/code&gt;里吧，就像之前说的，是读取不到的&lt;/li&gt;
&lt;li&gt;google到一方法，通过&lt;a href=&quot;http://seejeffrun.blogspot.com/2008/04/cron-doesnt-read-minds-customizing-my.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;crontab&lt;/a&gt;来解决&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://capistranorb.com/documentation/faq/why-does-something-work-in-my-ssh-session-but-not-in-capistrano/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why does something work in my SSH session, but not in Capistrano?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.solipsys.co.uk/new/BashInitialisationFiles.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bash init files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sstephenson/rbenv/wiki/Unix-shell-initialization&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rbenv unix shell initialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tldp.org/LDP/abs/html/intandnonint.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Interactive and non-interactive shells and scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bash startup files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.thinkplexx.com/learn/howto/security/ssh/setting-ssh-remote-host-environment-variables-interactive-shell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Setting ssh remote host environment variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://linux.die.net/man/5/ssh_config&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ssh_config(5) - Linux man page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;先说下这问题咋来的，目前开发流程如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------+       scp files...                     +-----------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| localhost     |  ===================================&amp;gt;  | remote host     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   for coding  |   remote ssh command for compiling     |   for compiling |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------+                                        +-----------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上图，代码是本地马吊们敲出来地，so文件是要放到远程开发环境编译出来地；&lt;br&gt;普通青年尼，可能是打开xshell，xftp，先把文件拖上去，然后ssh登陆编译环境，然后make;&lt;br&gt;效率极低不说，逼格也不够啊，于是乎就有了下面代码：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scp *&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;*.&amp;#123;gcc,h,pc,cpp&amp;#125; ya-dev:~/src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh ya-dev &lt;span class=&quot;string&quot;&gt;&#39;cd ~/src; ls &#39;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;*&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;*&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;.gcc  | xargs -I &amp;#123;&amp;#125; make -f &amp;#123;&amp;#125; ORA_VER=10&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;问题来了，远程执行会报错，部分lib库找不到；但是ssh登陆后再执行就没问题~&lt;br&gt;&lt;code&gt;ssh ya-dev env&lt;/code&gt; 一看，果然缺少很多环境变量，为什么会这样呢，这就要从爷爷粮票的故事讲起了~&lt;/p&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://michaelhuang.github.io/categories/Tips/"/>
    
    
      <category term="ssh" scheme="http://michaelhuang.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Assassins</title>
    <link href="http://michaelhuang.github.io/2014/03/31/pic_test/"/>
    <id>http://michaelhuang.github.io/2014/03/31/pic_test/</id>
    <published>2014-03-31T13:18:56.000Z</published>
    <updated>2017-06-29T02:24:26.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;Give me the name, I’ll give U the blood&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://michaelhuang.qiniudn.com/games/04.jpg&quot; alt=&quot;Give me the name, I&amp;#39;ll give U the blood&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;Speak to me or speak to God&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://michaelhuang.qiniudn.com/games/01.jpg&quot; alt=&quot;Speak to me or speak to God&quot;&gt;&lt;br&gt;&lt;strong&gt;We work in the dark and serve the lights,we are assassins&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://michaelhuang.qiniudn.com/games/03.jpg&quot; alt=&quot;We work in the dark and serve the lights,we are assassins&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Give me the name, I’ll give U the blood&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://michaelhuang.qiniudn.com/games/04.jpg&quot; alt=&quot;Give me the name, I&amp;#39;ll give U the blood&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Pics" scheme="http://michaelhuang.github.io/categories/Pics/"/>
    
    
      <category term="games" scheme="http://michaelhuang.github.io/tags/games/"/>
    
  </entry>
  
</feed>
